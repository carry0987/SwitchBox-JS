/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["SwitchBox"] = factory();
	else
		root["SwitchBox"] = factory();
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./error.js":
/*!******************!*\
  !*** ./error.js ***!
  \******************/
/***/ ((module) => {

eval("let throwError = function(msg) {\n    throw new Error(msg);\n};\n\nmodule.exports = throwError;\n\n\n//# sourceURL=webpack://SwitchBox/./error.js?");

/***/ }),

/***/ "./report.js":
/*!*******************!*\
  !*** ./report.js ***!
  \*******************/
/***/ ((module) => {

eval("let reportInfo = function(vars, showType = false) {\n    if (showType === true) {\n        console.log('Data Type : ' + typeof vars, '\\nValue : ' + vars);\n    } else if(typeof showType !== 'boolean') {\n        console.log(showType);\n    } else {\n        console.log(vars);\n    }\n};\n\nmodule.exports = reportInfo;\n\n\n//# sourceURL=webpack://SwitchBox/./report.js?");

/***/ }),

/***/ "./switchBox.js":
/*!**********************!*\
  !*** ./switchBox.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Util = __webpack_require__(/*! ./util */ \"./util.js\");\nconst throwError = __webpack_require__(/*! ./error */ \"./error.js\");\nconst reportInfo = __webpack_require__(/*! ./report */ \"./report.js\");\n\nclass SwitchBox {\n    constructor(elem, option = {}) {\n        if (!(this instanceof SwitchBox)) return new SwitchBox(option);\n        this.init(elem, option, SwitchBox.instance.length);\n        SwitchBox.instance.push(this);\n\n        if (SwitchBox.instance.length === 1) reportInfo('SwitchBox is loaded, version:' + SwitchBox.version);\n    }\n\n    /**\n     * Initializes the plugin\n     */\n    init(elem, option, id) {\n        let ele = Util.getElem(elem);\n        if (!ele) throwError('Element not found');\n        if (ele.type !== 'checkbox') throwError('Element must be checkbox');\n        if (ele.hasAttribute('data-switchbox')) return this;\n        ele.setAttribute('data-switchbox', 'true');\n        this.ele = ele;\n        this.id = id;\n        this.option = Util.deepMerge({}, SwitchBox.defaultOption, option);\n        if (this.ele.checked) {\n            this.ele.setAttribute('checked', 'checked');\n        } else {\n            if (this.option.checked) {\n                this.ele.checked = true;\n                this.ele.setAttribute('checked', 'checked');\n            }\n        }\n\n        // Inject stylesheet\n        if (this.option?.styles && Object.keys(this.option.styles).length > 0) {\n            let styles = Util.deepMerge({}, this.option.styles);\n            Util.injectStylesheet(styles, id);\n        }\n\n        // Insert switch box\n        let template = Util.getTemplate(id, this.option.theme);\n        let templateNode = document.createElement('div');\n        templateNode.innerHTML = template.trim();\n        let labelNode = Util.getElem('label', templateNode);\n        labelNode.insertBefore(this.ele.cloneNode(true), labelNode.firstChild);\n        this.ele.parentNode.replaceChild(templateNode.firstChild, this.ele);\n        // Handle switch title\n        let switchTitleNode = Util.getElem(`div.switch-box-${id} .switch-title`);\n        if (this.option.title === null) {\n            switchTitleNode.parentNode.removeChild(switchTitleNode);\n        } else {\n            let switchTitleSpan = Util.getElem('span', switchTitleNode);\n            switchTitleSpan.textContent = this.option.title;\n        }\n        // Reselect new switch\n        this.ele = Util.getElem(elem);\n        this.ele.addEventListener('click', (e) => {\n            const isChecked = e.target.checked;\n            e.target.setAttribute('checked', isChecked);\n        });\n\n        return this;\n    }\n\n    /**\n     * Destroys the plugin\n     */\n    destroy() {\n        this.ele.parentNode.removeChild(this.ele);\n        Util.removeStylesheet(this.id);\n        SwitchBox.instance.splice(this.id, 1);\n        return this;\n    }\n}\n\nSwitchBox.version = '1.0.0';\nSwitchBox.instance = [];\nSwitchBox.defaultOption = {\n    title: null,\n    checked: false,\n    styles: {},\n    theme: 'blue'\n};\nSwitchBox.destroyAll = () => {\n    SwitchBox.instance.forEach((item, index) => {\n        item.destroy();\n    });\n    SwitchBox.instance = [];\n};\n\nmodule.exports = SwitchBox;\n\n\n//# sourceURL=webpack://SwitchBox/./switchBox.js?");

/***/ }),

/***/ "./util.js":
/*!*****************!*\
  !*** ./util.js ***!
  \*****************/
/***/ ((module) => {

eval("/* Util */\nconst Util = {\n    getElem(ele, mode, parent) {\n        if (typeof ele === 'object') {\n            return ele;\n        } else if (mode === undefined && parent === undefined) {\n            return (isNaN(ele * 1)) ? document.querySelector(ele) : document.getElementById(ele);\n        } else if (mode === 'all' || mode === null) {\n            return (parent === undefined) ? document.querySelectorAll(ele) : parent.querySelectorAll(ele);\n        } else if (typeof mode === 'object' && parent === undefined) {\n            return mode.querySelector(ele);\n        }\n    },\n    isObject(item) {\n        return item && typeof item === 'object' && !Array.isArray(item);\n    },\n    deepMerge(target, ...sources) {\n        if (!sources.length) return target;\n        const source = sources.shift();\n\n        if (Util.isObject(target) && Util.isObject(source)) {\n            for (const key in source) {\n                if (Util.isObject(source[key])) {\n                    if (!target[key]) Object.assign(target, { [key]: {} });\n                    Util.deepMerge(target[key], source[key]);\n                } else {\n                    Object.assign(target, { [key]: source[key] });\n                }\n            }\n        }\n        return Util.deepMerge(target, ...sources);\n    },\n    injectStylesheet(stylesObject, id) {\n        let style = document.createElement('style');\n        style.id = 'switchbox-style' + id;\n        style.appendChild(document.createTextNode(''));\n        document.head.appendChild(style);\n\n        let stylesheet = document.styleSheets[document.styleSheets.length - 1];\n\n        for (let selector in stylesObject) {\n            if (stylesObject.hasOwnProperty(selector)) {\n                Util.compatInsertRule(stylesheet, selector, Util.buildRules(stylesObject[selector]), id);\n            }\n        }\n    },\n    buildRules(ruleObject) {\n        let ruleSet = '';\n        for (let property in ruleObject) {\n            if (ruleObject.hasOwnProperty(property)) {\n                ruleSet += property + ':' + ruleObject[property] + ';';\n            }\n        }\n        return ruleSet;\n    },\n    compatInsertRule(stylesheet, selector, cssText, id) {\n        let modifiedSelector = selector.replace('.switch-box', '.switch-box-' + id);\n        stylesheet.insertRule(modifiedSelector + '{' + cssText + '}', 0);\n    },\n    removeStylesheet: function(id) {\n        let styleElement = Util.getElem('#switchbox-style' + id);\n        if (styleElement) {\n            styleElement.parentNode.removeChild(styleElement);\n        }\n    },\n    getTemplate: function(id, theme) {\n        let template = `\n        <div class=\"switch-box switch-box-${id}\">\n            <label class=\"switch switch-${theme}\">\n                <span class=\"switch-style\"></span>\n            </label>\n            <div class=\"switch-title\">\n                <span></span>\n            </div>\n        </div>\n        `;\n        return template;\n    }\n};\n\nmodule.exports = Util;\n\n\n//# sourceURL=webpack://SwitchBox/./util.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./switchBox.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});